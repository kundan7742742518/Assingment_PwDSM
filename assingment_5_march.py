# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F6YvxclisyD8zp2VyYSc6NtkyH31aP7A

ANS  = 1

Prepare the data.
Create a new plot.
Add renders for your data, with your visual customization for the plot.
Specify where to generate the output (In HTML file or in Jupyter Notebook)
Show the result.

Blow example show how we do this from pyhton
"""

import bokeh.io
import bokeh.plotting 
bokeh.io.output_notebook()

from bokeh.plotting import figure , output_file , show
from bokeh.sampledata.iris import flowers

output_file('test.html')
p = figure(title = 'test flower')
p.xaxis.axis_label = "petal_length"
p.yaxis.axis_label = "petal_width"
p.circle(flowers['petal_length'] , flowers['petal_width'])
show(p)

"""ANS = 2

In Bokeh, glyphs are graphical representations of data points in a plot. 
Glyphs are used to visually display data using various shapes, colors, sizes, and styles. 
Examples of glyphs include circles, squares, triangles, lines, 
and more. Bokeh provides a variety of glyph methods that can be used to add different types of glyphs to a plot.
"""

x = [1, 2, 3, 4, 5]
y = [6, 7, 2, 4, 5]

output_file('question.html')

p = figure(title = 'question 2')
p.xaxis.axis_label = "x"
p.yaxis.axis_label = "y"
p.circle(x,y , line_color= 'green' ,line_width= 10)
show(p)

"""ANS = 3"""

# Axis 
"""
setting labels for your axes
styling the numbers displayed with your axes
defining colors and other layout properties for the axes themselves
defining axis range 
Formatting axis ticks
"""

# title 
"""
To customize the appearance of the title, we can use attributes such as title_text_color, title_text_font_size

"""
# legend 
"""
To customize the appearance of the legend, we can use the legend attribute of the figure object.
"""

"""ANS = 4"""

"""
Bokeh server is a Python library that allows for the creation of interactive web applications with Bokeh visualizations.
 It provides a way to serve Bokeh plots and widgets to web browsers, allowing for real-time updates and interactions.
"""
"""

Define your plot and data in Python code using the Bokeh library. You can create any type of Bokeh plot, 
including scatter plots, line plots, and bar charts.
Instantiate a Bokeh server application object, which will be used to serve your plot to the web.
Define a function that will update the data in your plot. 
This function will be called whenever the user interacts with your plot, such as by clicking on a button or dragging a slider.
Create a Bokeh widget, such as a button or slider, that will trigger the update function when the user interacts with it.
Add the widget to your Bokeh plot, and add the plot to the Bokeh server application.
Run the Bokeh server using the bokeh serve command in your terminal. 
This will start a web server that will serve your Bokeh application to your web browser.
Open your web browser and navigate to the URL of your Bokeh application. You should see your interactive plot with the widget you defined.
"""

"""ANS = 5"""

"""
Bokeh is a powerful data visualization library for Python that allows you to create interactive plots,
graphs, and charts. 
Flask and Django are popular web frameworks for Python that make it easy to build web applications. 
Embedding Bokeh plots into web pages or dashboards created with Flask or Django is relatively straightforward.
"""
# flask 
"""
Create a Flask application.
Install Bokeh using pip install bokeh.
Import the necessary modules: from bokeh.embed import components and from bokeh.plotting import figure.
Create a Bokeh plot using the figure function, e.g., plot = figure().
Add data to the plot using the appropriate glyph functions, e.g., plot.line(x, y).
Use the components function to generate the necessary HTML and JavaScript to embed the plot into the web page, e.g., script, div = components(plot).
Pass the script and div variables to the Flask template, where you want to display the plot.
Render the Flask template using the render_template function.
"""

# Django 
"""
Create a Django application.
Install Bokeh using pip install bokeh.
Import the necessary modules: from bokeh.embed import components and from bokeh.plotting import figure.
Create a Bokeh plot using the figure function, e.g., plot = figure().
Add data to the plot using the appropriate glyph functions, e.g., plot.line(x, y).
Use the components function to generate the necessary HTML and JavaScript to embed the plot into the web page, e.g., script, div = components(plot).
Create a Django view function that passes the script and div variables to the template.
Create a Django template that embeds the Bokeh plot using the script and div variables.
"""





